<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.control.Button?>
<?import javafx.scene.control.TextArea?>
<?import javafx.scene.layout.AnchorPane?>
<?import javafx.scene.text.Font?>


<AnchorPane id="AnchorPane" prefHeight="600.0" prefWidth="700.0" xmlns:fx="http://javafx.com/fxml/1" xmlns="http://javafx.com/javafx/8.0.141" fx:controller="learnalgo.CodeHeapCsharpController">
   <children>
      <TextArea editable="false" prefHeight="600.0" prefWidth="700.0" text="using System;&#10;using System.Collections.Generic;&#10;using System.Text;&#10; &#10;public class HeapSortClass&#10;{&#10;    public static void HeapSort&lt;T&gt;(T[] array)&#10;    {&#10;        HeapSort&lt;T&gt;(array, 0, array.Length, Comparer&lt;T&gt;.Default);&#10;    }&#10; &#10;    public static void HeapSort&lt;T&gt;(T[] array, int offset, int length, IComparer&lt;T&gt; comparer)&#10;    {&#10;        HeapSort&lt;T&gt;(array, offset, length, comparer.Compare);&#10;    }&#10; &#10;    public static void HeapSort&lt;T&gt;(T[] array, int offset, int length, Comparison&lt;T&gt; comparison)&#10;    {&#10;        // build binary heap from all items&#10;        for (int i = 0; i &lt; length; i++)&#10;        {&#10;            int index = i;&#10;            T item = array[offset + i]; // use next item&#10; &#10;            // and move it on top, if greater than parent&#10;            while (index &gt; 0 &amp;&amp;&#10;                comparison(array[offset + (index - 1) / 2], item) &lt; 0)&#10;            {&#10;                int top = (index - 1) / 2;&#10;                array[offset + index] = array[offset + top];&#10;                index = top;&#10;            }&#10;            array[offset + index] = item;&#10;        }&#10; &#10;        for (int i = length - 1; i &gt; 0; i--)&#10;        {&#10;            // delete max and place it as last&#10;            T last = array[offset + i];&#10;            array[offset + i] = array[offset];&#10; &#10;            int index = 0;&#10;            // the last one positioned in the heap&#10;            while (index * 2 + 1 &lt; i)&#10;            {&#10;                int left = index * 2 + 1, right = left + 1;&#10; &#10;                if (right &lt; i &amp;&amp; comparison(array[offset + left], array[offset + right]) &lt; 0)&#10;                {&#10;                    if (comparison(last, array[offset + right]) &gt; 0) break;&#10; &#10;                    array[offset + index] = array[offset + right];&#10;                    index = right;&#10;                }&#10;                else&#10;                {&#10;                    if (comparison(last, array[offset + left]) &gt; 0) break;&#10; &#10;                    array[offset + index] = array[offset + left];&#10;                    index = left;&#10;                }&#10;            }&#10;            array[offset + index] = last;&#10;        }&#10;    }&#10; &#10;    static void Main()&#10;    {&#10;        // usage&#10;        byte[] r = {5, 4, 1, 2};&#10;        HeapSort(r);&#10; &#10;        string[] s = { &quot;-&quot;, &quot;D&quot;, &quot;a&quot;, &quot;33&quot; };&#10;        HeapSort(s, 0, s.Length, StringComparer.CurrentCultureIgnoreCase);&#10;    }&#10;}">
         <font>
            <Font name="System Bold" size="12.0" />
         </font>
      </TextArea>
      <Button layoutX="622.0" layoutY="547.0" mnemonicParsing="false" onAction="#backButtonAction" text="BACK" />
   </children>
</AnchorPane>
