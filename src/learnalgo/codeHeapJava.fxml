<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.control.Button?>
<?import javafx.scene.control.TextArea?>
<?import javafx.scene.layout.AnchorPane?>
<?import javafx.scene.text.Font?>


<AnchorPane id="AnchorPane" prefHeight="600.0" prefWidth="700.0" xmlns:fx="http://javafx.com/fxml/1" xmlns="http://javafx.com/javafx/8.0.141" fx:controller="learnalgo.CodeHeapJavaController">
   <children>
      <TextArea editable="false" prefHeight="600.0" prefWidth="700.0" text="public static void heapSort(int[] a){&#10;&#9;int count = a.length;&#10; &#10;&#9;//first place a in max-heap order&#10;&#9;heapify(a, count);&#10; &#10;&#9;int end = count - 1;&#10;&#9;while(end &gt; 0){&#10;&#9;&#9;//swap the root(maximum value) of the heap with the&#10;&#9;&#9;//last element of the heap&#10;&#9;&#9;int tmp = a[end];&#10;&#9;&#9;a[end] = a[0];&#10;&#9;&#9;a[0] = tmp;&#10;&#9;&#9;//put the heap back in max-heap order&#10;&#9;&#9;siftDown(a, 0, end - 1);&#10;&#9;&#9;//decrement the size of the heap so that the previous&#10;&#9;&#9;//max value will stay in its proper place&#10;&#9;&#9;end--;&#10;&#9;}&#10;}&#10; &#10;public static void heapify(int[] a, int count){&#10;&#9;//start is assigned the index in a of the last parent node&#10;&#9;int start = (count - 2) / 2; //binary heap&#10; &#10;&#9;while(start &gt;= 0){&#10;&#9;&#9;//sift down the node at index start to the proper place&#10;&#9;&#9;//such that all nodes below the start index are in heap&#10;&#9;&#9;//order&#10;&#9;&#9;siftDown(a, start, count - 1);&#10;&#9;&#9;start--;&#10;&#9;}&#10;&#9;//after sifting down the root all nodes/elements are in heap order&#10;}&#10; &#10;public static void siftDown(int[] a, int start, int end){&#10;&#9;//end represents the limit of how far down the heap to sift&#10;&#9;int root = start;&#10; &#10;&#9;while((root * 2 + 1) &lt;= end){      //While the root has at least one child&#10;&#9;&#9;int child = root * 2 + 1;           //root*2+1 points to the left child&#10;&#9;&#9;//if the child has a sibling and the child's value is less than its sibling's...&#10;&#9;&#9;if(child + 1 &lt;= end &amp;&amp; a[child] &lt; a[child + 1])&#10;&#9;&#9;&#9;child = child + 1;           //... then point to the right child instead&#10;&#9;&#9;if(a[root] &lt; a[child]){     //out of max-heap order&#10;&#9;&#9;&#9;int tmp = a[root];&#10;&#9;&#9;&#9;a[root] = a[child];&#10;&#9;&#9;&#9;a[child] = tmp;&#10;&#9;&#9;&#9;root = child;                //repeat to continue sifting down the child now&#10;&#9;&#9;}else&#10;&#9;&#9;&#9;return;&#10;&#9;}&#10;}">
         <font>
            <Font name="System Bold" size="12.0" />
         </font>
      </TextArea>
      <Button layoutX="623.0" layoutY="553.0" mnemonicParsing="false" onAction="#backButtonAction" text="BACK" />
   </children>
</AnchorPane>
